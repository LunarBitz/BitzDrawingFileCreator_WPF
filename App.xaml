<Application x:Class="BitzDrawingFileCreator_WPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:BitzDrawingFileCreator_WPF"
             xmlns:appdata="clr-namespace:BitzDrawingFileCreator_WPF.Data"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Logo Style -->
        <Style x:Key="bitzLabel" TargetType="{x:Type Label}">
            <Setter Property="Background" Value="#00000000"/>
            <Setter Property="Foreground" Value="{Binding theme_Text_Primary, FallbackValue=#FFc000c0}"/>
        </Style>
        
        <!-- Logo Style -->
        <Style x:Key="bitzMenuLogo" TargetType="{x:Type StackPanel}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="{Binding theme_MenuLogo_Background_Primary, FallbackValue=#FF3f164d}"/>
                        <GradientStop Offset="1" Color="{Binding theme_MenuLogo_Background_Secondary, FallbackValue=#00000000}"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Button Style -->
        <Style x:Key="bitzButton" TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Background" Value="{Binding theme_Button_Background, FallbackValue=#800f0f0f}"/>
            <Setter Property="BorderBrush" Value="{Binding theme_Button_Border, FallbackValue=#00000000}"/>
            <Setter Property="Foreground" Value="{Binding theme_Button_Text, FallbackValue=#FFc000c0}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding theme_Button_Hover, FallbackValue=#FF404040}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Background" TargetName="border" Value="{Binding theme_Button_Background, FallbackValue=#800f0f0f}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding theme_Button_Clicked, FallbackValue=#FF79517d}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BorderBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Menu Style -->
        <Style x:Key="bitzMenu" TargetType="{x:Type StackPanel}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                        <GradientStop Color="{Binding theme_Menu_Background_Primary, FallbackValue=#FF0f0f0f}" Offset="0"/>
                        <GradientStop Color="{Binding theme_Menu_Background_Secondary, FallbackValue=#00000000}" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Menu Option Style -->
        <Style x:Key="bitzMenuOption" TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="BorderBrush" Value="{Binding theme_MenuOption_Border, FallbackValue=#00000000}" />
            <Setter Property="Background" Value="{Binding theme_MenuOption_Background, FallbackValue=#00000000}" />
            <Setter Property="Foreground" Value="{Binding theme_MenuOption_Text, FallbackValue=#FFc000c0}"/>
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="FontSize" Value="20"/>

            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontStyle" Value="Normal"/>
            <Setter Property="Padding" Value="32, 0, 0, 0"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding theme_MenuOption_Hover, FallbackValue=#FF404040}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding theme_MenuOption_Clicked, FallbackValue=#79517d}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BorderBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Sub-Menu Style -->
        <Style x:Key="bitzSubMenu" TargetType="{x:Type StackPanel}">
            <Setter Property="Background" Value="{Binding theme_SubMenu_Background, FallbackValue=#FF232027}"/>
            <Setter Property="Margin" Value="4, 4, 4, 4"/>
        </Style>

        <!-- Sub-Menu Option Style -->
        <Style x:Key="bitzSubMenuOption" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{Binding theme_SubMenuOption_Text, FallbackValue=#FF5f2568}"/>
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="FontStyle" Value="Italic" />
            <Setter Property="Padding" Value="64, 0, 0, 0"/>

            <Setter Property="Background" Value="{Binding theme_SubMenuOption_Background, FallbackValue=#00000000}"/>
            <Setter Property="BorderBrush" Value="{Binding theme_SubMenuOption_Border, FallbackValue=#00000000}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding theme_SubMenuOption_Selected, FallbackValue=#FFc0c0c0}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding theme_SubMenuOption_Hover, FallbackValue=#FF404040}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding theme_SubMenuOption_Clicked, FallbackValue=#FF79517d}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{Binding theme_SubMenuOption_Background, FallbackValue=#00000000}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BorderBrush}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Transparent"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

        <!-- Group Box Style -->
        <Style x:Key="bitzGroupBox" TargetType="{x:Type GroupBox}">
            <Setter Property="Background" Value="{Binding theme_Group_Background, FallbackValue=#00000000}"/>
            <Setter Property="BorderBrush" Value="{Binding theme_Group_Border, FallbackValue=#809e9e9e}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupBox}">
                        <Grid SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="6"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="6"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="6"/>
                            </Grid.RowDefinitions>
                            <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
                            <Border BorderBrush="#00000000" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                                <Border.OpacityMask>
                                    <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                        <Binding ElementName="Header" Path="ActualWidth"/>
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                    </MultiBinding>
                                </Border.OpacityMask>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                    <Border BorderBrush="#00000000" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" UseLayoutRounding="False"/>
                                </Border>
                            </Border>
                            <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                                <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- TextBox Style -->
        <Style x:Key="bitzTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="{Binding theme_TextBox_Background, FallbackValue=#800f0f0f}"/>
            <Setter Property="BorderBrush" Value="{Binding theme_TextBox_Border, FallbackValue=#8079517d}"/>
            <Setter Property="Foreground" Value="{Binding theme_TextBox_Text, FallbackValue=#FF5f2568}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="true">
                                <Setter Property="Opacity" TargetName="border" Value="1.0"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="false">
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding theme_TextBox_Border, FallbackValue=#8079517d}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding theme_TextBox_Focus, FallbackValue=#809e9e9e}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{Binding theme_TextBox_Inactive, FallbackValue=#801f1f1f}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <!-- ScrollBar Style -->
        <!-- x:Key="bitzScrollBar" -->
        <Style TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Margin" Value="-16 0 0 0"/>
            <Setter Property="MinWidth" Value="{Binding Width, RelativeSource={RelativeSource Self}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="Transparent">
                            <Border Padding="4">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0, 0.5" StartPoint="1, 0.5">
                                        <GradientStop Color="{Binding theme_Scroll_Background_Primary}" Offset="1"/>
                                        <GradientStop Color="{Binding theme_Scroll_Background_Secondary}" Offset="0"/>
                                    </LinearGradientBrush>
                                </Border.Background>

                                <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Opacity="0" Command="{x:Static ScrollBar.PageUpCommand}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Opacity="0" Command="{x:Static ScrollBar.PageDownCommand}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{DynamicResource ScrollBarThumb}"/>
                                    </Track.Thumb>
                                </Track>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="MinWidth" Value="0"/>
                    <Setter Property="Height" Value="16"/>
                    <Setter Property="Margin" Value="0 -16 0 0"/>
                    <Setter Property="MinHeight" Value="{Binding Height, RelativeSource={RelativeSource Self}}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                    <Border Padding="4">
                                        <Border.Background>
                                            <LinearGradientBrush EndPoint="0.5, 0" StartPoint="0.5, 1">
                                                <GradientStop Color="{Binding theme_Scroll_Background_Primary}" Offset="1"/>
                                                <GradientStop Color="{Binding theme_Scroll_Background_Secondary}" Offset="0"/>
                                            </LinearGradientBrush>
                                        </Border.Background>

                                        <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
                                            <Track.DecreaseRepeatButton>
                                                <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                            </Track.DecreaseRepeatButton>
                                            <Track.IncreaseRepeatButton>
                                                <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"/>
                                            </Track.IncreaseRepeatButton>
                                            <Track.Thumb>
                                                <Thumb Style="{DynamicResource ScrollBarThumb}"/>
                                            </Track.Thumb>
                                        </Track>
                                    </Border>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border x:Name="rectangle"
                            SnapsToDevicePixels="True"
                            Background="{Binding theme_Scroll_Thumb}"
                            CornerRadius="4"
                            Opacity="0.3"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"/>
                        <ControlTemplate.Triggers>
                            <EventTrigger RoutedEvent="MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="rectangle" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0.3" Duration="0:0:0.3" Storyboard.TargetName="rectangle" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        


    </Application.Resources>
</Application>
